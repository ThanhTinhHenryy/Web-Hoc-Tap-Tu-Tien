import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import backgroundImage from "../../assets/background/auth.png";
import achievements from "../../../data/achievement.js";

const CreateQuestion = () => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    question: "",
    answers: ["", "", "", ""],
    correctAnswer: 0,
    level: "Ph√†m Nh√¢n",
    attribute: "C∆° b·∫£n",
    explanation: "",
  });

  const [userQuestions, setUserQuestions] = useState([]);
  const [isEditing, setIsEditing] = useState(false);
  const [editIndex, setEditIndex] = useState(null);
  const [showPreview, setShowPreview] = useState(false);
  const [previewQuestion, setPreviewQuestion] = useState(null);
  const [compactView, setCompactView] = useState(true);
  const [earnedAchievements, setEarnedAchievements] = useState([]);
  const [showAchievementPopup, setShowAchievementPopup] = useState(false);

  // L·∫•y danh s√°ch c√¢u h·ªèi t·ª´ localStorage khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const savedQuestions =
      JSON.parse(localStorage.getItem("userQuestions")) || [];
    setUserQuestions(savedQuestions);
  }, []);

  // C·∫≠p nh·∫≠t localStorage khi userQuestions thay ƒë·ªïi v√† ki·ªÉm tra th√†nh t·ª±u
  useEffect(() => {
    localStorage.setItem("userQuestions", JSON.stringify(userQuestions));
    
    // Ki·ªÉm tra th√†nh t·ª±u khi s·ªë l∆∞·ª£ng c√¢u h·ªèi thay ƒë·ªïi
    if (userQuestions.length > 0) {
      checkAndUpdateAchievements(userQuestions.length);
    }
  }, [userQuestions]);
  
  // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t th√†nh t·ª±u
  const checkAndUpdateAchievements = (questionCount) => {
    const newAchievements = [];
    const userAchievements = JSON.parse(localStorage.getItem("userAchievements")) || [];
    
    // Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán th√†nh t·ª±u
    achievements.forEach(achievement => {
      if (!userAchievements.includes(achievement.id)) {
        let isEarned = false;
        
        switch (achievement.condition) {
          case "first_question":
            isEarned = questionCount === 1;
            break;
          case "ten_questions":
            isEarned = questionCount >= 10;
            break;
          default:
            break;
        }
        
        if (isEarned) {
          newAchievements.push(achievement);
          userAchievements.push(achievement.id);
        }
      }
    });
    
    // L∆∞u th√†nh t·ª±u v√†o localStorage
    if (newAchievements.length > 0) {
      localStorage.setItem("userAchievements", JSON.stringify(userAchievements));
      setEarnedAchievements(newAchievements);
      setShowAchievementPopup(true);
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // X·ª≠ l√Ω thay ƒë·ªïi ƒë√°p √°n
  const handleAnswerChange = (index, value) => {
    const newAnswers = [...formData.answers];
    newAnswers[index] = value;
    setFormData({
      ...formData,
      answers: newAnswers,
    });
  };

  // X·ª≠ l√Ω thay ƒë·ªïi ƒë√°p √°n ƒë√∫ng
  const handleCorrectAnswerChange = (index) => {
    setFormData({
      ...formData,
      correctAnswer: index,
    });
  };

  // X·ª≠ l√Ω submit form
  const handleSubmit = (e) => {
    e.preventDefault();

    // Ki·ªÉm tra d·ªØ li·ªáu
    if (!formData.question.trim()) {
      alert("Vui l√≤ng nh·∫≠p c√¢u h·ªèi");
      return;
    }

    if (formData.answers.some((answer) => !answer.trim())) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c ƒë√°p √°n");
      return;
    }

    if (!formData.explanation.trim()) {
      alert("Vui l√≤ng nh·∫≠p gi·∫£i th√≠ch cho ƒë√°p √°n");
      return;
    }

    // T·∫°o c√¢u h·ªèi m·ªõi v·ªõi ID
    const newQuestion = {
      ...formData,
      id: isEditing ? userQuestions[editIndex].id : Date.now(), // S·ª≠ d·ª•ng ID hi·ªán t·∫°i n·∫øu ƒëang ch·ªânh s·ª≠a, ng∆∞·ª£c l·∫°i t·∫°o ID m·ªõi
    };

    if (isEditing) {
      // C·∫≠p nh·∫≠t c√¢u h·ªèi hi·ªán c√≥
      const updatedQuestions = [...userQuestions];
      updatedQuestions[editIndex] = newQuestion;
      setUserQuestions(updatedQuestions);
      setIsEditing(false);
      setEditIndex(null);
    } else {
      // Th√™m c√¢u h·ªèi m·ªõi
      setUserQuestions([...userQuestions, newQuestion]);
    }

    // Reset form
    resetForm();
  };

  // Reset form
  const resetForm = () => {
    setFormData({
      question: "",
      answers: ["", "", "", ""],
      correctAnswer: 0,
      level: "Ph√†m Nh√¢n",
      attribute: "C∆° b·∫£n",
      explanation: "",
    });
  };

  // X·ª≠ l√Ω ch·ªânh s·ª≠a c√¢u h·ªèi
  const handleEdit = (index) => {
    setIsEditing(true);
    setEditIndex(index);
    setFormData(userQuestions[index]);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  // X·ª≠ l√Ω x√≥a c√¢u h·ªèi
  const handleDelete = (index) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y kh√¥ng?")) {
      const updatedQuestions = [...userQuestions];
      updatedQuestions.splice(index, 1);
      setUserQuestions(updatedQuestions);
    }
  };

  // X·ª≠ l√Ω xem tr∆∞·ªõc c√¢u h·ªèi
  const handlePreview = (index) => {
    setPreviewQuestion(userQuestions[index]);
    setShowPreview(true);
  };

  // X·ª≠ l√Ω ƒë√≥ng xem tr∆∞·ªõc
  const handleClosePreview = () => {
    setShowPreview(false);
    setPreviewQuestion(null);
  };

  // X·ª≠ l√Ω b·∫Øt ƒë·∫ßu luy·ªán t·∫≠p
  const handleStartPractice = () => {
    if (userQuestions.length === 0) {
      alert("B·∫°n c·∫ßn t·∫°o √≠t nh·∫•t m·ªôt c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu luy·ªán t·∫≠p");
      return;
    }

    // L∆∞u c√¢u h·ªèi v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng trong trang luy·ªán t·∫≠p
    localStorage.setItem("practiceQuestions", JSON.stringify(userQuestions));
    navigate("/tu-luyen/luyen-tap-cau-hoi");
  };

  return (
    <div
      className="min-h-screen pt-16 pb-6 relative" // Th√™m padding-top ƒë·ªÉ tr√°nh b·ªã header che khu·∫•t
      style={{
        backgroundImage: `url(${backgroundImage})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundColor: "rgba(0, 0, 0, 0.5)",
        backgroundBlendMode: "multiply",
      }}
    >
      <div className="container mx-auto px-4 relative z-10 max-w-6xl flex flex-col items-center">
        {/* Popup hi·ªÉn th·ªã th√†nh t·ª±u ƒë·∫°t ƒë∆∞·ª£c */}
        {showAchievementPopup && earnedAchievements.length > 0 && (
          <div className="fixed inset-0 flex items-center justify-center z-50 bg-black/70">
            <div className="bg-gray-800 rounded-lg p-8 max-w-md w-full mx-4 border border-yellow-500 shadow-lg shadow-yellow-500/20 animate-fade-in">
              <div className="text-center">
                <div className="text-5xl mb-4">üèÜ</div>
                <h2 className="text-2xl font-bold text-yellow-300 mb-6">Th√†nh t·ª±u m·ªõi!</h2>
                
                <div className="space-y-6 mb-8">
                  {earnedAchievements.map((achievement) => (
                    <div key={achievement.id} className="flex items-center bg-gray-700/50 p-4 rounded-lg border border-yellow-600/30">
                      <div className="w-16 h-16 rounded-full flex items-center justify-center mr-4 bg-yellow-500/20">
                        <img src={achievement.image} alt={achievement.name} className="w-12 h-12" />
                      </div>
                      <div className="text-left">
                        <h3 className="text-xl font-bold text-yellow-300">{achievement.name}</h3>
                        <p className="text-gray-300">{achievement.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="flex justify-center space-x-4">
                  <button
                    onClick={() => setShowAchievementPopup(false)}
                    className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-500 transition-all duration-300"
                  >
                    ƒê√≥ng
                  </button>
                  <Link
                    to="/tu-luyen/thanh-tuu"
                    onClick={() => setShowAchievementPopup(false)}
                    className="bg-gradient-to-r from-yellow-600 to-amber-500 text-white px-4 py-2 rounded-lg hover:from-yellow-500 hover:to-amber-400 transition-all duration-300"
                  >
                    Xem t·∫•t c·∫£ th√†nh t·ª±u
                  </Link>
                </div>
              </div>
            </div>
          </div>
        )}
        {/* Gi·ªõi h·∫°n chi·ªÅu r·ªông t·ªëi ƒëa v√† cƒÉn gi·ªØa */}
        {/* Ti√™u ƒë·ªÅ v√† n√∫t chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô xem */}
        <div className="flex justify-center items-center mb-4 w-full relative">
          <h1 className="text-2xl font-bold text-yellow-300 flex items-center justify-center drop-shadow-[0_2px_2px_rgba(0,0,0,0.8)]">
            <span className="text-blue-300 mr-2 text-xl">‚úèÔ∏è</span>
            T·∫°o C√¢u H·ªèi
          </h1>

          <button
            onClick={() => setCompactView(!compactView)}
            className="bg-blue-600 text-white px-3 py-1.5 rounded-lg hover:bg-blue-500 transition-all duration-300 text-sm flex items-center absolute right-0"
          >
            {compactView ? "M·ªü r·ªông" : "Thu g·ªçn"}
            <span className="ml-1">{compactView ? "üîç" : "üîé"}</span>
          </button>
        </div>
        {/* Form t·∫°o c√¢u h·ªèi */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 w-full">
          {/* Gi·∫£m gap */}
          <div className="lg:col-span-2">
            <div className="bg-gray-800/90 backdrop-blur-sm rounded-lg p-4 shadow-lg border border-gray-700">
              {" "}
              {/* Gi·∫£m padding */}
              <h2 className="text-xl font-bold text-yellow-300 mb-3">
                {" "}
                {/* Gi·∫£m k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ */}
                {isEditing ? "Ch·ªânh s·ª≠a c√¢u h·ªèi" : "T·∫°o c√¢u h·ªèi m·ªõi"}
              </h2>
              <form onSubmit={handleSubmit}>
                {/* C√¢u h·ªèi */}
                <div className="mb-3">
                  {" "}
                  {/* Gi·∫£m margin */}
                  <label className="block text-gray-200 mb-1 text-sm">
                    C√¢u h·ªèi:
                  </label>{" "}
                  {/* Gi·∫£m k√≠ch th∆∞·ªõc v√† margin */}
                  <textarea
                    name="question"
                    value={formData.question}
                    onChange={handleInputChange}
                    className="w-full p-2 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 text-sm"
                    rows={compactView ? "2" : "3"}
                    placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                    required
                  />
                  {/* Gi·∫£m padding v√† k√≠ch th∆∞·ªõc ch·ªØ cho textarea c√¢u h·ªèi */}
                  {/* ƒêi·ªÅu ch·ªânh s·ªë d√≤ng d·ª±a tr√™n ch·∫ø ƒë·ªô xem */}
                </div>

                {/* ƒê√°p √°n */}
                <div className="mb-3">
                  {/* Gi·∫£m margin */}
                  <label className="block text-gray-200 mb-1 text-sm">
                    ƒê√°p √°n:
                  </label>
                  {/* Gi·∫£m k√≠ch th∆∞·ªõc v√† margin */}
                  {formData.answers.map((answer, index) => (
                    <div key={index} className="flex items-center mb-1">
                      {/* Gi·∫£m margin */}
                      <input
                        type="radio"
                        name="correctAnswer"
                        checked={formData.correctAnswer === index}
                        onChange={() => handleCorrectAnswerChange(index)}
                        className="mr-1 h-4 w-4 text-purple-600"
                      />
                      {/* Gi·∫£m k√≠ch th∆∞·ªõc v√† margin */}
                      <input
                        type="text"
                        value={answer}
                        onChange={(e) =>
                          handleAnswerChange(index, e.target.value)
                        }
                        className="flex-1 p-1.5 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 text-sm"
                        placeholder={`ƒê√°p √°n ${index + 1}`}
                        required
                      />
                      {/* Gi·∫£m padding v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                    </div>
                  ))}
                  <p className="text-gray-400 text-xs mt-1">
                    {/* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ */}* Ch·ªçn ƒë√°p √°n ƒë√∫ng b·∫±ng c√°ch
                    click v√†o n√∫t radio b√™n tr√°i
                  </p>
                </div>

                <div className="grid grid-cols-2 gap-2 mb-3">
                  {/* S·ª≠ d·ª•ng grid ƒë·ªÉ ƒë·∫∑t c·∫•p ƒë·ªô v√† thu·ªôc t√≠nh c·∫°nh nhau */}
                  {/* C·∫•p ƒë·ªô */}
                  <div>
                    <label className="block text-gray-200 mb-1 text-sm">
                      C·∫•p ƒë·ªô:
                    </label>
                    {/* Gi·∫£m k√≠ch th∆∞·ªõc v√† margin */}
                    <select
                      name="level"
                      value={formData.level}
                      onChange={handleInputChange}
                      className="w-full p-1.5 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 text-sm"
                    >
                      {/* Gi·∫£m padding v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                      <option value="Ph√†m Nh√¢n">Ph√†m Nh√¢n</option>
                      <option value="Luy·ªán Kh√≠">Luy·ªán Kh√≠</option>
                      <option value="Tr√∫c C∆°">Tr√∫c C∆°</option>
                      <option value="Kim ƒêan">Kim ƒêan</option>
                      <option value="Nguy√™n Anh">Nguy√™n Anh</option>
                      <option value="H√≥a Th·∫ßn">H√≥a Th·∫ßn</option>
                    </select>
                  </div>

                  {/* Thu·ªôc t√≠nh */}
                  <div>
                    <label className="block text-gray-200 mb-1 text-sm">
                      Thu·ªôc t√≠nh:
                    </label>
                    <select
                      name="attribute"
                      value={formData.attribute}
                      onChange={handleInputChange}
                      className="w-full p-1.5 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 text-sm"
                    >
                      <option value="C∆° b·∫£n">C∆° b·∫£n</option>
                      <option value="L√Ω thuy·∫øt">L√Ω thuy·∫øt</option>
                      <option value="Th·ª±c h√†nh">Th·ª±c h√†nh</option>
                      <option value="Ti·∫øn b·ªô">Ti·∫øn b·ªô</option>
                    </select>
                  </div>
                </div>

                {/* Gi·∫£i th√≠ch */}
                <div className="mb-3">
                  <label className="block text-gray-200 mb-1 text-sm">
                    Gi·∫£i th√≠ch:
                  </label>
                  <textarea
                    name="explanation"
                    value={formData.explanation}
                    onChange={handleInputChange}
                    className="w-full p-2 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-1 focus:ring-purple-500 text-sm"
                    rows={compactView ? "2" : "3"}
                    placeholder="Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n n√†y l√† ƒë√∫ng..."
                    required
                  />
                </div>

                {/* N√∫t submit */}
                <div className="flex space-x-2">
                  {/* Gi·∫£m kho·∫£ng c√°ch */}
                  <button
                    type="submit"
                    className="bg-gradient-to-r from-purple-600 to-indigo-500 text-white px-4 py-2 rounded-lg hover:from-purple-500 hover:to-indigo-400 transition-all duration-300 shadow-md hover:shadow-purple-500/50 text-sm"
                  >
                    {isEditing ? "C·∫≠p nh·∫≠t c√¢u h·ªèi" : "Th√™m c√¢u h·ªèi"}
                  </button>
                  {isEditing && (
                    <button
                      type="button"
                      onClick={() => {
                        setIsEditing(false);
                        setEditIndex(null);
                        resetForm();
                      }}
                      className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-500 transition-all duration-300 text-sm"
                    >
                      H·ªßy
                    </button>
                  )}
                </div>
              </form>
            </div>
          </div>
          {/* Danh s√°ch c√¢u h·ªèi ƒë√£ t·∫°o */}
          <div className="lg:col-span-1">
            <div className="bg-gray-800/90 backdrop-blur-sm rounded-lg p-3 shadow-lg border border-gray-700">
              {/* Gi·∫£m padding */}
              <div className="flex justify-between items-center mb-2">
                {/* Gi·∫£m margin */}
                <h2 className="text-lg font-bold text-yellow-300">
                  {/* Gi·∫£m k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ */}
                  C√¢u h·ªèi ƒë√£ t·∫°o ({userQuestions.length})
                </h2>
                {userQuestions.length > 0 && (
                  <button
                    onClick={handleStartPractice}
                    className="bg-green-600 text-white px-3 py-1 rounded-lg hover:bg-green-500 transition-all duration-300 text-xs"
                  >
                    B·∫Øt ƒë·∫ßu luy·ªán t·∫≠p
                  </button>
                )}
              </div>

              {userQuestions.length === 0 ? (
                <div className="text-center py-4">
                  {/* Gi·∫£m padding */}
                  <p className="text-gray-400 text-sm">
                    Ch∆∞a c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c t·∫°o
                  </p>
                  {/* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ */}
                  <p className="text-gray-500 mt-1 text-xs">
                    {/* Gi·∫£m margin v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                    H√£y t·∫°o c√¢u h·ªèi ƒë·∫ßu ti√™n c·ªßa b·∫°n!
                  </p>
                </div>
              ) : (
                <div className="space-y-2 max-h-[500px] overflow-y-auto pr-1">
                  {/* Gi·∫£m kho·∫£ng c√°ch v√† chi·ªÅu cao t·ªëi ƒëa */}
                  {userQuestions.map((q, index) => (
                    <div
                      key={q.id}
                      className="bg-gray-700 rounded-lg p-2 border border-gray-600 text-sm"
                    >
                      <h3 className="text-white font-medium mb-1 line-clamp-2 text-sm">
                        {/* Gi·∫£m margin v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                        {q.question}
                      </h3>
                      <div className="flex items-center text-xs text-gray-400 mb-1">
                        {/* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ v√† margin */}
                        <span className="bg-purple-900 text-purple-200 px-1.5 py-0.5 rounded mr-1 text-xs">
                          {/* Gi·∫£m padding, margin v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                          {q.level}
                        </span>
                        <span className="bg-blue-900 text-blue-200 px-1.5 py-0.5 rounded text-xs">
                          {/* Gi·∫£m padding v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                          {q.attribute}
                        </span>
                      </div>
                      <div className="flex space-x-1">
                        {/* Gi·∫£m kho·∫£ng c√°ch */}
                        <button
                          onClick={() => handlePreview(index)}
                          className="bg-blue-600 text-white px-2 py-0.5 rounded text-xs hover:bg-blue-500 transition-all duration-300"
                        >
                          Xem
                        </button>
                        <button
                          onClick={() => handleEdit(index)}
                          className="bg-yellow-600 text-white px-2 py-0.5 rounded text-xs hover:bg-yellow-500 transition-all duration-300"
                        >
                          S·ª≠a
                        </button>
                        <button
                          onClick={() => handleDelete(index)}
                          className="bg-red-600 text-white px-2 py-0.5 rounded text-xs hover:bg-red-500 transition-all duration-300"
                        >
                          X√≥a
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
        
        {/* N√∫t quay l·∫°i */}
        <div className="mt-6 mb-4">
          <Link
            to="/tu-luyen/practice-goal"
            className="bg-white text-[#2B003F] font-bold py-2 px-6 rounded-lg shadow-lg hover:shadow-white/30 hover:scale-105 transition-all duration-300 flex items-center"
          >
            <span className="text-lg font-bold">QUAY L·∫†I</span>
          </Link>
        </div>
      </div>

      {/* Modal xem tr∆∞·ªõc c√¢u h·ªèi */}
      {showPreview && previewQuestion && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-2">
          {/* Gi·∫£m padding */}
          <div className="bg-gray-800 rounded-lg p-4 max-w-xl w-full max-h-[80vh] overflow-y-auto">
            {/* Gi·∫£m padding, chi·ªÅu r·ªông t·ªëi ƒëa v√† chi·ªÅu cao t·ªëi ƒëa */}
            <div className="flex justify-between items-center mb-2">
              {/* Gi·∫£m margin */}
              <h2 className="text-xl font-bold text-yellow-300">
                {/* Gi·∫£m k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ */}
                Xem tr∆∞·ªõc c√¢u h·ªèi
              </h2>
              <button
                onClick={handleClosePreview}
                className="text-gray-400 hover:text-white text-xl"
              >
                √ó
              </button>
            </div>

            <div className="mb-4">
              {/* Gi·∫£m margin */}
              <h3 className="text-lg text-white font-medium mb-2">
                {/* Gi·∫£m k√≠ch th∆∞·ªõc ti√™u ƒë·ªÅ v√† margin */}
                {previewQuestion.question}
              </h3>

              <div className="space-y-2 mb-4">
                {/* Gi·∫£m kho·∫£ng c√°ch v√† margin */}
                {previewQuestion.answers.map((answer, index) => (
                  <div
                    key={index}
                    className={`p-2 rounded-lg border ${
                      /* Gi·∫£m padding */
                      index === previewQuestion.correctAnswer
                        ? "bg-green-800/50 border-green-500"
                        : "bg-gray-700 border-gray-600"
                    }`}
                  >
                    <div className="flex items-start">
                      <div
                        className={`flex-shrink-0 h-5 w-5 rounded-full flex items-center justify-center mr-2 ${
                          /* Gi·∫£m k√≠ch th∆∞·ªõc v√† margin */
                          index === previewQuestion.correctAnswer
                            ? "bg-green-500 text-white"
                            : "bg-gray-600 text-gray-300"
                        }`}
                      >
                        {String.fromCharCode(65 + index)}
                      </div>
                      <span className="text-white text-sm">{answer}</span>
                      {/* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ */}
                    </div>
                  </div>
                ))}
              </div>

              <div className="bg-gray-700/50 border border-gray-600 rounded-lg p-3">
                {/* Gi·∫£m padding */}
                <h4 className="text-blue-300 font-medium mb-1 text-sm">
                  Gi·∫£i th√≠ch:
                </h4>
                {/* Gi·∫£m margin v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                <p className="text-gray-300 text-sm">
                  {previewQuestion.explanation}
                </p>
                {/* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ */}
              </div>

              <div className="flex items-center mt-3 text-xs text-gray-400">
                {/* Gi·∫£m margin v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                <span className="bg-purple-900 text-purple-200 px-1.5 py-0.5 rounded mr-1 text-xs">
                  {/* Gi·∫£m padding, margin v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                  {previewQuestion.level}
                </span>
                <span className="bg-blue-900 text-blue-200 px-1.5 py-0.5 rounded text-xs">
                  {/* Gi·∫£m padding v√† k√≠ch th∆∞·ªõc ch·ªØ */}
                  {previewQuestion.attribute}
                </span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CreateQuestion;
