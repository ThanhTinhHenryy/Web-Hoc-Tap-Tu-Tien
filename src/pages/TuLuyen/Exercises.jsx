import React, { useState, useEffect } from "react";
import { Link, useParams } from "react-router-dom";
import backgroundImage from "../../assets/background.jpg";
import exerciseQuestions from "../../../data/exercises.js";

const Exercises = () => {
  const { levelId } = useParams();
  const [level, setLevel] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [answeredQuestions, setAnsweredQuestions] = useState([]); // M·∫£ng l∆∞u tr·ªØ c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn cho m·ªói c√¢u h·ªèi
  const [score, setScore] = useState(0);
  const [highestScore, setHighestScore] = useState(0); // Bi·∫øn l∆∞u ƒëi·ªÉm cao nh·∫•t
  const [showQuiz, setShowQuiz] = useState(false);
  const [showResult, setShowResult] = useState(false);

  // D·ªØ li·ªáu c√°c t·∫ßng tu luy·ªán v√† b√†i t·∫≠p t∆∞∆°ng ·ª©ng

  useEffect(() => {
    // √Ånh x·∫° levelId sang t√™n t·∫ßng tu luy·ªán                                  
    const levelNames = {
      1: "Luy·ªán Kh√≠",
      2: "Tr√∫c C∆°",
      3: "Kim ƒêan",
      4: "Nguy√™n Anh",
      5: "H√≥a Th·∫ßn",
      0: "Ph√†m Nh√¢n",
    };

    // L·ªçc c√¢u h·ªèi d·ª±a tr√™n t·∫ßng tu luy·ªán
    const levelName = levelNames[levelId];
    const filteredQuestions = exerciseQuestions.filter(
      (q) => q.level === levelName
    );
    setQuestions(filteredQuestions);
    setCurrentQuestion(0);
    setShowAnswer(false);
    setSelectedAnswer(null);
    setScore(0);
    setAnsweredQuestions([]);
    localStorage.removeItem('userAnswers');

    // T·∫°o th√¥ng tin t·∫ßng tu luy·ªán
    if (levelId && levelNames[levelId]) {
      setLevel({
        name: levelNames[levelId],
        description: `T·∫ßng tu luy·ªán ${levelNames[levelId]} - H√£y ki·ªÉm tra ki·∫øn th·ª©c c·ªßa b·∫°n.`,
        exercises: [],
      });
    }
  }, [levelId]);
  
  // T·∫£i d·ªØ li·ªáu c√¢u tr·∫£ l·ªùi ƒë√£ l∆∞u khi component ƒë∆∞·ª£c t·∫£i
  useEffect(() => {
    if (showQuiz && !showResult) {
      const userAnswers = JSON.parse(localStorage.getItem('userAnswers')) || {};
      const answeredQuestionsArray = Object.keys(userAnswers).map(Number);
      
      if (answeredQuestionsArray.length > 0) {
        setAnsweredQuestions(answeredQuestionsArray);
        
        // N·∫øu c√¢u h·ªèi hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi, hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn
        if (answeredQuestionsArray.includes(currentQuestion)) {
          const savedAnswer = userAnswers[currentQuestion];
          if (savedAnswer !== undefined) {
            setSelectedAnswer(savedAnswer);
            setShowAnswer(true);
          }
        }
      }
    }
  }, [showQuiz, showResult, currentQuestion]);

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn c√¢u tr·∫£ l·ªùi
  const handleAnswerSelect = (answerIndex) => {
    // Ki·ªÉm tra xem c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ch∆∞a
    if (showAnswer || answeredQuestions.includes(currentQuestion)) return; // Kh√¥ng cho ph√©p ch·ªçn n·∫øu ƒë√£ hi·ªÉn th·ªã ƒë√°p √°n ho·∫∑c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi
    
    setSelectedAnswer(answerIndex);
    setShowAnswer(true);
    
    // Th√™m c√¢u h·ªèi hi·ªán t·∫°i v√†o m·∫£ng c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi
    setAnsweredQuestions([...answeredQuestions, currentQuestion]);
    
    // L∆∞u c√¢u tr·∫£ l·ªùi v√†o localStorage
    const userAnswers = JSON.parse(localStorage.getItem('userAnswers')) || {};
    userAnswers[currentQuestion] = answerIndex;
    localStorage.setItem('userAnswers', JSON.stringify(userAnswers));

    // Ki·ªÉm tra ƒë√°p √°n v√† c·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
    if (answerIndex === questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    } else {
      // N·∫øu tr·∫£ l·ªùi sai, l∆∞u c√¢u h·ªèi v√†o danh s√°ch c√¢u h·ªèi sai
      const wrongQuestions = JSON.parse(localStorage.getItem('wrongQuestions')) || {};
      const questionId = questions[currentQuestion].id;
      wrongQuestions[questionId] = true;
      localStorage.setItem('wrongQuestions', JSON.stringify(wrongQuestions));
    }
  };

  // H√†m chuy·ªÉn sang c√¢u h·ªèi ti·∫øp theo
  const handleNextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      const nextQuestion = currentQuestion + 1;
      setCurrentQuestion(nextQuestion);
      
      // Ki·ªÉm tra xem c√¢u h·ªèi ti·∫øp theo ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ch∆∞a
      if (answeredQuestions.includes(nextQuestion)) {
        // N·∫øu ƒë√£ tr·∫£ l·ªùi, hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn
        const userAnswers = JSON.parse(localStorage.getItem('userAnswers')) || {};
        const savedAnswer = userAnswers[nextQuestion];
        if (savedAnswer !== undefined) {
          setSelectedAnswer(savedAnswer);
          setShowAnswer(true);
        }
      } else {
        // N·∫øu ch∆∞a tr·∫£ l·ªùi, ƒë·∫∑t l·∫°i tr·∫°ng th√°i
        setSelectedAnswer(null);
        setShowAnswer(false);
      }
    } else {
      // ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi, chuy·ªÉn sang trang k·∫øt qu·∫£
      setShowResult(true);
      // C·∫≠p nh·∫≠t ƒëi·ªÉm cao nh·∫•t n·∫øu ƒëi·ªÉm hi·ªán t·∫°i cao h∆°n
      if (score > highestScore) {
        setHighestScore(score);
      }
    }
  };

  // H√†m quay l·∫°i c√¢u h·ªèi tr∆∞·ªõc ƒë√≥
  const handlePreviousQuestion = () => {
    if (currentQuestion > 0) {
      const prevQuestion = currentQuestion - 1;
      setCurrentQuestion(prevQuestion);
      
      // Ki·ªÉm tra xem c√¢u h·ªèi tr∆∞·ªõc ƒë√≥ ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi ch∆∞a
      if (answeredQuestions.includes(prevQuestion)) {
        // N·∫øu ƒë√£ tr·∫£ l·ªùi, hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn
        const userAnswers = JSON.parse(localStorage.getItem('userAnswers')) || {};
        const savedAnswer = userAnswers[prevQuestion];
        if (savedAnswer !== undefined) {
          setSelectedAnswer(savedAnswer);
          setShowAnswer(true);
        }
      } else {
        // N·∫øu ch∆∞a tr·∫£ l·ªùi, ƒë·∫∑t l·∫°i tr·∫°ng th√°i
        setSelectedAnswer(null);
        setShowAnswer(false);
      }
    }
  };

  // H√†m b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra
  const startQuiz = () => {
    setShowQuiz(true);
    setShowResult(false);
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowAnswer(false);
    setScore(0);
    setAnsweredQuestions([]); // X√≥a danh s√°ch c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi
    localStorage.removeItem('userAnswers'); // X√≥a d·ªØ li·ªáu c√¢u tr·∫£ l·ªùi ƒë√£ l∆∞u
  };
  
  // H√†m reset b√†i ki·ªÉm tra
  const resetQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowAnswer(false);
    setAnsweredQuestions([]); // X√≥a danh s√°ch c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi
    localStorage.removeItem('userAnswers'); // X√≥a d·ªØ li·ªáu c√¢u tr·∫£ l·ªùi ƒë√£ l∆∞u
  };

  if (!level) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-purple-900">
        <p className="text-white text-xl">ƒêang t·∫£i th√¥ng tin...</p>
      </div>
    );
  }

  return (
    <div
      className="min-h-screen flex flex-col items-center justify-center py-10 relative"
      style={{
        backgroundImage: `url(${backgroundImage})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundColor: "rgba(0, 0, 0, 0.5)",
        backgroundBlendMode: "multiply",
      }}
    >
      {/* Overlay ƒë·ªÉ tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n c·ªßa background */}
      {/* <div className="absolute inset-0 bg-black bg-opacity-40"></div> */}

      <div className="w-full max-w-6xl px-6 py-8 relative z-10">
        {/* Ti√™u ƒë·ªÅ */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold text-yellow-300 flex items-center justify-center drop-shadow-[0_2px_2px_rgba(0,0,0,0.8)]">
            <span className="text-green-300 mr-4 text-4xl">üìö</span>
            B√†i T·∫≠p Tu Luy·ªán
          </h1>
          <p className="text-xl text-purple-200 mt-4 drop-shadow-[0_1px_1px_rgba(0,0,0,0.8)]">
            T·∫ßng {level.name} - H·ªìi Linh Ch√¢n Nh√¢n
          </p>
          <p className="text-lg text-gray-300 mt-2 max-w-3xl mx-auto">
            {level.description}
          </p>
        </div>

        {/* Danh s√°ch b√†i t·∫≠p */}
        <div className="space-y-8">
          {level.exercises.map((exercise) => (
            <div
              key={exercise.id}
              className="bg-gradient-to-r from-green-900/80 to-teal-900/80 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 border border-green-500/50"
            >
              <div className="p-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold text-green-300 drop-shadow-[0_1px_1px_rgba(0,0,0,0.8)]">
                    {exercise.id}. {exercise.name}
                  </h2>
                  <span className="bg-green-700 text-white px-4 py-1 rounded-full text-sm font-medium">
                    {exercise.difficulty}
                  </span>
                </div>

                <p className="text-gray-200 mt-3">{exercise.description}</p>

                <div className="mt-4">
                  <h3 className="text-yellow-300 font-semibold mb-2">
                    C√°c b∆∞·ªõc th·ª±c hi·ªán:
                  </h3>
                  <ol className="list-decimal list-inside space-y-2 text-gray-300 pl-4">
                    {exercise.steps.map((step, index) => (
                      <li key={index}>{step}</li>
                    ))}
                  </ol>
                </div>

                <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h3 className="text-blue-300 font-semibold mb-1">
                      Th·ªùi gian:
                    </h3>
                    <p className="text-gray-300">{exercise.duration}</p>
                  </div>
                  <div>
                    <h3 className="text-purple-300 font-semibold mb-1">
                      L·ª£i √≠ch:
                    </h3>
                    <p className="text-gray-300">{exercise.benefits}</p>
                  </div>
                </div>

                <div className="mt-6 flex justify-end">
                  <button className="bg-gradient-to-r from-green-600 to-green-500 text-white px-6 py-2 rounded-lg hover:from-green-500 hover:to-green-400 transition-all duration-300 shadow-md hover:shadow-green-500/50 flex items-center">
                    <span className="mr-2">B·∫Øt ƒë·∫ßu tu luy·ªán</span>
                    <span>üßò‚Äç‚ôÇÔ∏è</span>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Ph·∫ßn ki·ªÉm tra ki·∫øn th·ª©c */}
        {questions.length > 0 && (
          <div className="mt-16">
            {/* Thanh ti·∫øn tr√¨nh - lu√¥n hi·ªÉn th·ªã ·ªü tr√™n c√πng khi ƒëang l√†m b√†i ki·ªÉm tra */}
            <h2 className="text-3xl font-bold text-purple-300 mb-2 flex items-center">
              <span className="text-yellow-300 mr-3">üß†</span>
              Ki·ªÉm tra ki·∫øn th·ª©c
            </h2>
            {showQuiz && !showResult && (
              <div className="w-full px-4 pt-4 mb-4" style={{ marginTop: 10 }}>
                {/* Hi·ªÉn th·ªã ti·∫øn tr√¨nh */}
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-300">
                    C√¢u h·ªèi {currentQuestion + 1}/{questions.length}
                  </span>
                  <span className="text-gray-300">
                    ƒêi·ªÉm: {score}/{questions.length}
                  </span>
                </div>

                {/* Thanh ti·∫øn tr√¨nh */}
                <div className="w-full bg-gray-700 rounded-full h-2.5 mb-2">
                  <div
                    className="bg-gradient-to-r from-purple-500 to-indigo-400 h-2.5 rounded-full"
                    style={{
                      width: `${
                        ((currentQuestion + 1) / questions.length) * 100
                      }%`,
                    }}
                  ></div>
                </div>
              </div>
            )}

            <div
              // className="bg-gradient-to-r from-purple-900/90 to-indigo-900/90 rounded-lg overflow-hidden shadow-lg border border-purple-500/50 p-6"
              className="bg-gray-400/30 backdrop-blur-sm rounded-lg overflow-hidden shadow-lg min-h-[500px] flex flex-col items-center justify-center text-center border border-gray-300/30"
            >
              {/* <h2 className="text-3xl font-bold text-purple-300 mb-2 flex items-center">
                <span className="text-yellow-300 mr-3">üß†</span>
                Ki·ªÉm tra ki·∫øn th·ª©c
              </h2> */}

              {!showQuiz && !showResult ? (
                <div className="text-center py-8 flex flex-col items-center justify-center">
                  <p className="text-gray-200 mb-6">
                    Ki·ªÉm tra ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ t·∫ßng {level.name} v·ªõi{" "}
                    {questions.length} c√¢u h·ªèi tr·∫Øc nghi·ªám.
                  </p>
                  <button
                    onClick={startQuiz}
                    className="bg-gradient-to-r from-purple-600 to-indigo-500 text-white px-8 py-3 rounded-lg hover:from-purple-500 hover:to-indigo-400 transition-all duration-300 shadow-md hover:shadow-purple-500/50 flex items-center justify-center mx-auto"
                  >
                    <span className="mr-2">B·∫Øt ƒë·∫ßu ki·ªÉm tra</span>
                    <span>üìù</span>
                  </button>
                </div>
              ) : showResult ? (
                <div className="py-8">
                  {/* Trang k·∫øt qu·∫£ */}
                  <div className="text-center">
                    <div className="mb-8">
                      <div className="text-6xl font-bold text-yellow-300 mb-4">
                        {score}/{questions.length}
                      </div>
                      <div className="text-2xl text-purple-300 mb-2">
                        {score === questions.length
                          ? "Ho√†n h·∫£o! üéâ"
                          : score >= questions.length * 0.8
                          ? "Xu·∫•t s·∫Øc! üåü"
                          : score >= questions.length * 0.6
                          ? "T·ªët! üëç"
                          : score >= questions.length * 0.4
                          ? "C·∫ßn c·ªë g·∫Øng th√™m üí™"
                          : "H√£y h·ªçc l·∫°i üìö"}
                      </div>
                      <div className="text-gray-300">
                        B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {score} tr√™n t·ªïng s·ªë{" "}
                        {questions.length} c√¢u h·ªèi
                      </div>
                      <div className="text-amber-300 mt-4 font-semibold">
                        ƒêi·ªÉm cao nh·∫•t: {highestScore}/{questions.length}
                      </div>
                    </div>

                    {/* Thanh ti·∫øn tr√¨nh */}
                    <div className="w-full max-w-md mx-auto bg-gray-700 rounded-full h-4 mb-8">
                      <div
                        className="bg-gradient-to-r from-green-500 to-green-400 h-4 rounded-full"
                        style={{
                          width: `${(score / questions.length) * 100}%`,
                        }}
                      ></div>
                    </div>

                    <div className="flex justify-center space-x-4">
                      <button
                        onClick={startQuiz}
                        className="bg-gradient-to-r from-purple-600 to-indigo-500 text-white px-8 py-3 rounded-lg hover:from-purple-500 hover:to-indigo-400 transition-all duration-300 shadow-md hover:shadow-purple-500/50 flex items-center"
                      >
                        <span className="mr-2">L√†m l·∫°i b√†i ki·ªÉm tra</span>
                        <span>üîÑ</span>
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="py-6 px-4 w-full max-w-4xl mx-auto flex flex-col h-full">
                  {/* Ph·∫ßn c√¢u h·ªèi - lu√¥n ·ªü tr√™n c√πng */}
                  <div className="flex-none" style={{ marginBottom: 10 }}>
                    {questions[currentQuestion] && (
                      <h3 className="text-2xl font-semibold text-yellow-200 mb-8 px-6 py-4 bg-gray-800/50 rounded-lg border border-yellow-500/30 w-full text-center shadow-md">
                        {questions[currentQuestion].question}
                      </h3>
                    )}
                  </div>

                  {/* Ph·∫ßn l·ª±a ch·ªçn - ·ªü gi·ªØa */}
                  <div
                    className="flex-grow flex"
                    style={{ justifyContent: "center" }}
                  >
                    {questions[currentQuestion] && (
                      <div className="space-y-4 mb-8 w-[90%] mx-auto">
                        {questions[currentQuestion].answers.map(
                          (answer, index) => (
                            <div
                              key={index}
                              onClick={() => handleAnswerSelect(index)}
                              className={`p-5 rounded-lg transition-all duration-200 ${
                                selectedAnswer === index
                                  ? index ===
                                    questions[currentQuestion].correctAnswer
                                    ? "bg-green-700/70 border-2 border-green-400"
                                    : "bg-red-700/70 border-2 border-red-400"
                                  : "bg-gray-800/70 hover:bg-gray-700/70 border border-gray-600"
                              } 
                              ${
                                showAnswer &&
                                index ===
                                  questions[currentQuestion].correctAnswer
                                  ? "bg-green-700/70 border-0 border-green-400"
                                  : ""
                              } ${
                                answeredQuestions.includes(currentQuestion)
                                  ? "cursor-not-allowed"
                                  : "cursor-pointer"
                              }`}
                              style={{ marginBottom: 5 }}
                            >
                              <div className="flex items-center">
                                <span className="bg-gray-700 text-white w-12 h-12 rounded-full flex items-center justify-center mr-4 flex-shrink-0 text-xl font-bold">
                                  {String.fromCharCode(65 + index)}
                                </span>
                                <span className="text-gray-200 text-lg">
                                  {answer}
                                </span>
                              </div>
                            </div>
                          )
                        )}
                      </div>
                    )}
                  </div>

                  {/* Ph·∫ßn gi·∫£i th√≠ch - lu√¥n ·ªü d∆∞·ªõi c√πng */}
                  <div className="flex-none min-h-[150px] flex items-end justify-center w-full">
                    {questions[currentQuestion] && showAnswer ? (
                      <div className="bg-indigo-900/60 border border-indigo-500/50 rounded-lg p-6 mb-4 w-[90%] mx-auto shadow-lg">
                        <h4 className="text-indigo-300 font-semibold mb-4 text-center text-xl">
                          Gi·∫£i th√≠ch:
                        </h4>
                        <p className="text-gray-300 text-lg">
                          {questions[currentQuestion].explanation}
                        </p>
                      </div>
                    ) : (
                      <div className="h-[150px] w-full"></div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* N√∫t ƒëi·ªÅu h∆∞·ªõng */}
        <div className="flex justify-between mt-16">
          <Link
            to="/tu-luyen/co-ban/healing-cultivator"
            className="bg-gradient-to-r from-amber-700 to-amber-600 text-yellow-100 font-bold py-3 px-8 rounded-lg shadow-lg hover:shadow-amber-600/50 hover:scale-105 transition-all duration-300 border-2 border-amber-500 flex items-center"
          >
            <span className="mr-2 text-xl">‚¨ÖÔ∏è</span>
            <span className="text-lg">Quay l·∫°i</span>
          </Link>

          {/* N√∫t ƒëi·ªÅu h∆∞·ªõng c√¢u h·ªèi - hi·ªÉn th·ªã khi ƒëang l√†m b√†i ki·ªÉm tra */}
          {showQuiz && !showResult && (
            <div className="flex space-x-4">
              <button
                onClick={resetQuiz}
                className="bg-gradient-to-r from-red-600 to-red-500 text-white px-6 py-3 rounded-lg hover:from-red-500 hover:to-red-400 transition-all duration-300 shadow-md hover:shadow-red-500/50 flex items-center"
              >
                <span className="mr-2">üîÑ</span>
                <span>Reset</span>
              </button>
              <button
                onClick={handlePreviousQuestion}
                className={`bg-gradient-to-r from-gray-600 to-gray-500 text-white px-6 py-3 rounded-lg hover:from-gray-500 hover:to-gray-400 transition-all duration-300 shadow-md hover:shadow-gray-500/50 flex items-center ${
                  currentQuestion === 0 ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={currentQuestion === 0}
              >
                <span>‚¨ÖÔ∏è</span>
                <span className="ml-2">C√¢u tr∆∞·ªõc</span>
              </button>
              {showAnswer ? (
                <button
                  onClick={handleNextQuestion}
                  className="bg-gradient-to-r from-blue-600 to-indigo-500 text-white px-6 py-3 rounded-lg hover:from-blue-500 hover:to-indigo-400 transition-all duration-300 shadow-md hover:shadow-blue-500/50 flex items-center"
                >
                  <span className="mr-2">
                    {currentQuestion < questions.length - 1
                      ? "C√¢u ti·∫øp theo"
                      : "K·∫øt th√∫c"}
                  </span>
                  <span>‚û°Ô∏è</span>
                </button>
              ) : (
                <button
                  className="bg-gradient-to-r from-blue-600 to-indigo-500 text-white px-6 py-3 rounded-lg opacity-50 cursor-not-allowed flex items-center"
                  disabled
                >
                  <span className="mr-2">
                    {currentQuestion < questions.length - 1
                      ? "C√¢u ti·∫øp theo"
                      : "K·∫øt th√∫c"}
                  </span>
                  <span>‚û°Ô∏è</span>
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Exercises;
